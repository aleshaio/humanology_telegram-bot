"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π."""

from typing import Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from .base import BaseHandler
from bot.data.messages import FREE_ZONE_MESSAGES, ERROR_MESSAGES
from bot.data.keyboards import get_back_keyboard
from bot.services.consultation_service import consultation_service


class ConsultationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
    waiting_for_message = State()


class ConsultationHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π."""
    
    def __init__(self, router: Router):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
        super().__init__(router)
        self.active_consultations: Dict[int, bool] = {}  # user_id -> is_active
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –ù–∞—á–∞–ª–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        self.router.callback_query.register(
            self._handle_start_consultation,
            F.data == "start_consultation"
        )
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        self.router.message.register(
            self._handle_consultation_message,
            F.text,
            ConsultationStates.waiting_for_message
        )
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        self.router.callback_query.register(
            self._handle_end_consultation,
            F.data == "end_consultation"
        )
    
    async def _handle_start_consultation(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
        try:
            user_id = await self._get_or_create_user(callback.message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            limit_check = await consultation_service.check_user_limit(user_id)
            
            if not limit_check["can_consult"]:
                await callback.message.edit_text(
                    consultation_service.get_limit_reached_message(),
                    reply_markup=get_back_keyboard()
                )
                await callback.answer()
                return
            
            # –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            result = await consultation_service.start_consultation(user_id)
            
            if result["success"]:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
                self.active_consultations[user_id] = True
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                await state.set_state(ConsultationStates.waiting_for_message)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                welcome_text = consultation_service.get_consultation_welcome_message(
                    limit_check["remaining_messages"]
                )
                
                await callback.message.edit_text(
                    f"{welcome_text}\n\nüí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
                    reply_markup=get_back_keyboard()
                )
                
                await self._log_user_action(user_id, "consultation_started")
            else:
                await callback.message.edit_text(
                    result["message"],
                    reply_markup=get_back_keyboard()
                )
            
            await callback.answer()
            
        except Exception as e:
            await self._handle_callback_error(callback, "general")
    
    async def _handle_consultation_message(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
        try:
            user_id = await self._get_or_create_user(message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            if user_id not in self.active_consultations or not self.active_consultations[user_id]:
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self._log_user_action(user_id, "consultation_message_sent", message.text)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
            await message.answer("ü§ñ –ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenAI
            result = await consultation_service.send_message(user_id, message.text)
            
            if result["success"]:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ò–ò
                ai_response = result["ai_response"]
                remaining = result["remaining_messages"]
                
                response_text = f"ü§ñ {ai_response}\n\nüí¨ –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining}"
                
                await message.answer(response_text)
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
                if remaining <= 0:
                    await self._end_consultation(user_id, state)
                    await message.answer(
                        "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                        reply_markup=get_back_keyboard()
                    )
            else:
                await message.answer(
                    result["message"],
                    reply_markup=get_back_keyboard()
                )
                await self._end_consultation(user_id, state)
            
        except Exception as e:
            await self._handle_error(message, "general")
            await self._end_consultation(user_id, state)
    
    async def _handle_end_consultation(self, callback: CallbackQuery, state: FSMContext):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
        try:
            user_id = await self._get_or_create_user(callback.message)
            
            await self._end_consultation(user_id, state)
            
            await callback.message.edit_text(
                "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
                reply_markup=get_back_keyboard()
            )
            
            await callback.answer()
            
        except Exception as e:
            await self._handle_callback_error(callback, "general")
    
    async def _end_consultation(self, user_id: int, state: FSMContext):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
        try:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ —Å–µ—Ä–≤–∏—Å–µ
            await consultation_service.end_consultation(user_id)
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            if user_id in self.active_consultations:
                del self.active_consultations[user_id]
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await self._log_user_action(user_id, "consultation_ended")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
consultation_handler = ConsultationHandler(Router())
