"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from .base import BaseHandler
from bot.data.messages import MAIN_MENU_TEXT, FREE_ZONE_MESSAGES, PREMIUM_MESSAGES
from bot.data.keyboards import (
    get_main_menu_keyboard,
    get_ai_analysis_keyboard,
    get_webview_keyboard,
    get_consultation_keyboard
)
from bot.services.site_api_service import site_api_service
from bot.services.consultation_service import consultation_service


class MainMenuHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        # –ö–æ–º–∞–Ω–¥–∞ /start
        self.router.message.register(
            self._handle_start,
            Command("start")
        )
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.router.callback_query.register(
            self._handle_main_menu,
            F.data == "back_to_menu"
        )
        
        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫
        self.router.callback_query.register(
            self._handle_handbook,
            F.data == "handbook"
        )
        
        # –¢–µ—Å—Ç—ã —Å–∞–π—Ç–∞
        self.router.callback_query.register(
            self._handle_tests_site,
            F.data == "tests_site"
        )
        
        # –ù–∞—à —Ç–µ—Å—Ç
        self.router.callback_query.register(
            self._handle_our_test,
            F.data == "our_test"
        )
        
        # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        self.router.callback_query.register(
            self._handle_consultation,
            F.data == "consultation"
        )
        
        # –ò–ò-–∞–Ω–∞–ª–∏–∑
        self.router.callback_query.register(
            self._handle_ai_analysis,
            F.data == "ai_analysis"
        )
        
        # –ü–æ–¥–ø–∏—Å–∫–∞
        self.router.callback_query.register(
            self._handle_subscription,
            F.data == "subscription"
        )
        
        # –ü–∞–∫–µ—Ç—ã
        self.router.callback_query.register(
            self._handle_packages,
            F.data == "packages"
        )
        
        # –ö—É—Ä—Å—ã
        self.router.callback_query.register(
            self._handle_courses,
            F.data == "courses"
        )
        
        # –ö–∞—Ä—Ç—ã
        self.router.callback_query.register(
            self._handle_cards,
            F.data == "cards"
        )
    
    async def _handle_start(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
        user_id = await self._get_or_create_user(message)
        await self._log_user_action(user_id, "start_command")
        
        await message.answer(
            MAIN_MENU_TEXT,
            reply_markup=get_main_menu_keyboard()
        )
    
    async def _handle_main_menu(self, callback: CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        await callback.message.edit_text(
            MAIN_MENU_TEXT,
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
    
    async def _handle_handbook(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫'."""
        try:
            user_id = await self._get_or_create_user(callback.message)
            await self._log_user_action(user_id, "handbook_clicked")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            url = site_api_service.get_webview_url("handbook", user_id)
            
            await callback.message.edit_text(
                FREE_ZONE_MESSAGES["handbook"],
                reply_markup=get_webview_keyboard(url, "üìö –û—Ç–∫—Ä—ã—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
            )
            await callback.answer()
            
        except Exception as e:
            await self._handle_callback_error(callback, "general")
    
    async def _handle_tests_site(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–¢–µ—Å—Ç—ã (—Å–∞–π—Ç)'."""
        try:
            user_id = await self._get_or_create_user(callback.message)
            await self._log_user_action(user_id, "tests_site_clicked")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            url = site_api_service.get_webview_url("tests", user_id)
            
            await callback.message.edit_text(
                FREE_ZONE_MESSAGES["tests_site"],
                reply_markup=get_webview_keyboard(url, "üß™ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∞–º")
            )
            await callback.answer()
            
        except Exception as e:
            await self._handle_callback_error(callback, "general")
    
    async def _handle_our_test(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞—à —Ç–µ—Å—Ç'."""
        try:
            user_id = await self._get_or_create_user(callback.message)
            await self._log_user_action(user_id, "our_test_clicked")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Å—Ç—É
            from bot.handlers.test_handler import test_handler
            await test_handler.start_test(callback)
            
        except Exception as e:
            await self._handle_callback_error(callback, "general")
    
    async def _handle_consultation(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'."""
        try:
            user_id = await self._get_or_create_user(callback.message)
            await self._log_user_action(user_id, "consultation_clicked")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
            limit_check = await consultation_service.check_user_limit(user_id)
            
            if limit_check["can_consult"]:
                await callback.message.edit_text(
                    consultation_service.get_consultation_welcome_message(
                        limit_check["remaining_messages"]
                    ),
                    reply_markup=get_consultation_keyboard()
                )
            else:
                await callback.message.edit_text(
                    consultation_service.get_limit_reached_message(),
                    reply_markup=get_main_menu_keyboard()
                )
            
            await callback.answer()
            
        except Exception as e:
            await self._handle_callback_error(callback, "general")
    
    async def _handle_ai_analysis(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ò–ò-–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'."""
        try:
            user_id = await self._get_or_create_user(callback.message)
            await self._log_user_action(user_id, "ai_analysis_clicked")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏—è–º
            has_subscription = await db.check_subscription_status(user_id)
            package_balance = await db.check_package_balance(user_id)
            
            if has_subscription or package_balance > 0:
                await callback.message.edit_text(
                    PREMIUM_MESSAGES["ai_analysis_start"],
                    reply_markup=get_ai_analysis_keyboard()
                )
            else:
                await callback.message.edit_text(
                    PREMIUM_MESSAGES["access_denied"],
                    reply_markup=get_main_menu_keyboard()
                )
            
            await callback.answer()
            
        except Exception as e:
            await self._handle_callback_error(callback, "general")
    
    async def _handle_subscription(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–ø–∏—Å–∫–∞'."""
        try:
            user_id = await self._get_or_create_user(callback.message)
            await self._log_user_action(user_id, "subscription_clicked")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            url = site_api_service.get_webview_url("subscription", user_id)
            
            await callback.message.edit_text(
                PREMIUM_MESSAGES["subscription_check"],
                reply_markup=get_webview_keyboard(url, "‚≠ê –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
            )
            await callback.answer()
            
        except Exception as e:
            await self._handle_callback_error(callback, "general")
    
    async def _handle_packages(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–∞–∫–µ—Ç—ã'."""
        try:
            user_id = await self._get_or_create_user(callback.message)
            await self._log_user_action(user_id, "packages_clicked")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –ø–∞–∫–µ—Ç–æ–≤
            url = site_api_service.get_webview_url("packages", user_id)
            
            await callback.message.edit_text(
                PREMIUM_MESSAGES["packages_check"],
                reply_markup=get_webview_keyboard(url, "üì¶ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç")
            )
            await callback.answer()
            
        except Exception as e:
            await self._handle_callback_error(callback, "general")
    
    async def _handle_courses(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ö—É—Ä—Å—ã'."""
        try:
            user_id = await self._get_or_create_user(callback.message)
            await self._log_user_action(user_id, "courses_clicked")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∫—É—Ä—Å–æ–≤
            url = site_api_service.get_webview_url("courses", user_id)
            
            await callback.message.edit_text(
                "üéì –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫—É—Ä—Å–∞–º...",
                reply_markup=get_webview_keyboard(url, "üéì –û—Ç–∫—Ä—ã—Ç—å –∫—É—Ä—Å—ã")
            )
            await callback.answer()
            
        except Exception as e:
            await self._handle_callback_error(callback, "general")
    
    async def _handle_cards(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ö–∞—Ä—Ç—ã'."""
        try:
            user_id = await self._get_or_create_user(callback.message)
            await self._log_user_action(user_id, "cards_clicked")
            
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∫–∞—Ä—Ç
            url = site_api_service.get_webview_url("cards", user_id)
            
            await callback.message.edit_text(
                "üÉè –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–∞—Ä—Ç–∞–º...",
                reply_markup=get_webview_keyboard(url, "üÉè –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—ã")
            )
            await callback.answer()
            
        except Exception as e:
            await self._handle_callback_error(callback, "general")


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
main_menu_handler = MainMenuHandler(Router())
