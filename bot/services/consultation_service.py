"""–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏."""

import asyncio
from typing import Dict, Any, Optional
from openai import AsyncOpenAI

from config import settings
from bot.database.database import db


class ConsultationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.openai_client = AsyncOpenAI(api_key=settings.openai_api_key)
        self.free_limit = settings.free_consultation_limit
    
    async def check_user_limit(self, user_id: int) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            consultation = await db.get_consultation_info(user_id)
            
            if consultation is None:
                # –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
                return {
                    "can_consult": True,
                    "remaining_messages": self.free_limit,
                    "is_first_time": True
                }
            
            if consultation.message_count >= self.free_limit:
                return {
                    "can_consult": False,
                    "remaining_messages": 0,
                    "message": "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"
                }
            
            remaining = self.free_limit - consultation.message_count
            return {
                "can_consult": True,
                "remaining_messages": remaining,
                "is_first_time": False
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞: {e}")
            return {
                "can_consult": False,
                "remaining_messages": 0,
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞"
            }
    
    async def start_consultation(self, user_id: int) -> Dict[str, Any]:
        """–ù–∞—á–∞–ª–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
        try:
            limit_check = await self.check_user_limit(user_id)
            
            if not limit_check["can_consult"]:
                return {
                    "success": False,
                    "message": limit_check.get("message", "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"),
                    "remaining_messages": limit_check["remaining_messages"]
                }
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            consultation = await db.create_or_update_consultation(user_id, 0)
            
            return {
                "success": True,
                "message": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞",
                "remaining_messages": limit_check["remaining_messages"],
                "consultation_id": consultation.id
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
            return {
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"
            }
    
    async def send_message(
        self, 
        user_id: int, 
        message: str
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            limit_check = await self.check_user_limit(user_id)
            if not limit_check["can_consult"]:
                return {
                    "success": False,
                    "message": "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
                }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenAI
            response = await self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {
                        "role": "system",
                        "content": """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ —Å–æ—Ü–∏–æ–Ω–∏–∫–µ. 
                        –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ. 
                        –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º."""
                    },
                    {
                        "role": "user",
                        "content": message
                    }
                ],
                max_tokens=800,
                temperature=0.7
            )
            
            ai_response = response.choices[0].message.content
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            await db.create_or_update_consultation(user_id, 1)
            
            return {
                "success": True,
                "ai_response": ai_response,
                "remaining_messages": limit_check["remaining_messages"] - 1
            }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
            }
    
    async def end_consultation(self, user_id: int) -> bool:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
            return False
    
    def get_consultation_welcome_message(self, remaining_messages: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""
        if remaining_messages == self.free_limit:
            return f"üí¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –ò–ò! –£ –≤–∞—Å {remaining_messages} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü."
        else:
            return f"üí¨ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining_messages}"
    
    def get_limit_reached_message(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞."""
        return f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π ({self.free_limit} –≤ –º–µ—Å—è—Ü). –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
consultation_service = ConsultationService()
