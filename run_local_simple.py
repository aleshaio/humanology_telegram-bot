#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ Telegram-–±–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

–ó–∞–ø—É—Å–∫: python run_local_simple.py (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å aiogram –∏ python-dotenv)

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
–±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–µ–ø–ª–æ—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –í—Å–µ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –º–æ–∫–∞–º–∏.
"""

import asyncio
import logging
import os
import random
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

# –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
MOCK_TESTS = [
    {"id": 1, "name": "–¢–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏", "description": "16 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Ü–∏–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç–∏–ø–∞"},
    {"id": 2, "name": "–¢–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞", "description": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –æ–¥–Ω–æ–π –∏–∑ 4 –∫–≤–∞–¥—Ä"},
    {"id": 3, "name": "–¢–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏", "description": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤ —Å–æ—Ü–∏—É–º–µ"},
    {"id": 4, "name": "–¢–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–∏–ø–∞", "description": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏"}
]

MOCK_QUESTIONS = [
    {"id": 1, "question": "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?", "answers": ["–í –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ", "–í –∫–æ–º–ø–∞–Ω–∏–∏ –¥—Ä—É–∑–µ–π", "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"]},
    {"id": 2, "question": "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤ —Ä–∞–±–æ—Ç–µ?", "answers": ["–†–µ–∑—É–ª—å—Ç–∞—Ç", "–ü—Ä–æ—Ü–µ—Å—Å", "–ö–æ–º–∞–Ω–¥–∞", "–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ"]},
    {"id": 3, "question": "–ö–∞–∫ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è?", "answers": ["–ë—ã—Å—Ç—Ä–æ, –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ", "–ú–µ–¥–ª–µ–Ω–Ω–æ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è", "–°–æ–≤–µ—Ç—É—é—Å—å —Å –¥—Ä—É–≥–∏–º–∏"]},
    {"id": 4, "question": "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç?", "answers": ["–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π", "–ù–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è", "–ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º", "–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ"]}
]

MOCK_CONSULT_ANSWERS = [
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å –æ–± —ç—Ç–æ–º —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏.",
    "–≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –µ—ë –ø–æ—à–∞–≥–æ–≤–æ.",
    "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É.",
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π. –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ.",
    "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—à–µ–Ω–∏–π.",
    "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –Ω–∞–π–¥–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç."
]

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token or bot_token == "your_bot_token_here":
            logger.error("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            logger.error("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞ –æ—Ç @BotFather")
            logger.error("üí° –ü—Ä–∏–º–µ—Ä: BOT_TOKEN=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
            logger.error("üîó –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
            return
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏...")
        logger.info(f"ü§ñ –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {bot_token[:10]}...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º aiogram
        from aiogram import Bot, Dispatcher, types
        from aiogram.filters import Command
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(token=bot_token)
        dp = Dispatcher()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        main_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"),
                    KeyboardButton(text="–¢–µ—Å—Ç—ã (—Å–∞–π—Ç)")
                ],
                [
                    KeyboardButton(text="–ù–∞—à —Ç–µ—Å—Ç"),
                    KeyboardButton(text="–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
                ],
                [
                    KeyboardButton(text="–ò–ò-–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"),
                    KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞")
                ],
                [
                    KeyboardButton(text="–ü–∞–∫–µ—Ç—ã"),
                    KeyboardButton(text="–ö—É—Ä—Å—ã")
                ],
                [
                    KeyboardButton(text="–ö–∞—Ä—Ç—ã")
                ]
            ],
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        @dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            user_id = message.from_user.id
            user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            logger.info(f"USER ACTION: user_id={user_id}, action=start_command, data=user_name={user_name}")
            
            welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏!

üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Å–æ—Ü–∏–æ–Ω–∏—á–µ—Å–∫–∏–π —Ç–∏–ø.

üìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
            """
            
            await message.answer(welcome_text, reply_markup=main_keyboard)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫"
        @dp.message(lambda message: message.text == "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
        async def handle_handbook(message: types.Message):
            user_id = message.from_user.id
            logger.info(f"USER ACTION: user_id={user_id}, action=handbook_button, data=None")
            
            await message.answer("üåê WebView: –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ (–º–æ–∫)\n\nüìö –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ —Å–æ—Ü–∏–æ–Ω–∏–∫–µ –≤ WebView.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Å—Ç—ã (—Å–∞–π—Ç)"
        @dp.message(lambda message: message.text == "–¢–µ—Å—Ç—ã (—Å–∞–π—Ç)")
        async def handle_tests_site(message: types.Message):
            user_id = message.from_user.id
            logger.info(f"USER ACTION: user_id={user_id}, action=tests_site_button, data=None")
            
            tests_text = "üìù –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:\n\n"
            for test in MOCK_TESTS:
                tests_text += f"üî∏ {test['name']}\n"
                tests_text += f"   {test['description']}\n\n"
            
            tests_text += "üåê WebView: –¢–µ—Å—Ç—ã (–º–æ–∫)"
            
            await message.answer(tests_text)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—à —Ç–µ—Å—Ç"
        @dp.message(lambda message: message.text == "–ù–∞—à —Ç–µ—Å—Ç")
        async def handle_our_test(message: types.Message):
            user_id = message.from_user.id
            logger.info(f"USER ACTION: user_id={user_id}, action=our_test_button, data=None")
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
            test_text = "üß† –ù–∞—à —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏!\n\n"
            test_text += "üìã –í–æ–ø—Ä–æ—Å—ã:\n\n"
            
            for i, question in enumerate(MOCK_QUESTIONS, 1):
                test_text += f"{i}. {question['question']}\n"
                for j, answer in enumerate(question['answers']):
                    test_text += f"   {chr(65+j)}) {answer}\n"
                test_text += "\n"
            
            # –ú–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ (–º–æ–∫):\n\n"
            result_text += "üìä –ì–∏–ø–æ—Ç–µ–∑–∞ 1: –ê–Ω–∞–ª–∏—Ç–∏–∫ (INTJ) - 85%\n"
            result_text += "   ‚Ä¢ –ö–≤–∞–¥—Ä–∞: –ê–ª—å—Ñ–∞\n"
            result_text += "   ‚Ä¢ –†–æ–ª—å: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å\n\n"
            result_text += "üìä –ì–∏–ø–æ—Ç–µ–∑–∞ 2: –î–∏–ø–ª–æ–º–∞—Ç (INFJ) - 15%\n"
            result_text += "   ‚Ä¢ –ö–≤–∞–¥—Ä–∞: –ë–µ—Ç–∞\n"
            result_text += "   ‚Ä¢ –†–æ–ª—å: –ù–∞—Å—Ç–∞–≤–Ω–∏–∫"
            
            await message.answer(test_text + "\n" + result_text)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        @dp.message(lambda message: message.text == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
        async def handle_consultation(message: types.Message):
            user_id = message.from_user.id
            logger.info(f"USER ACTION: user_id={user_id}, action=consultation_button, data=None")
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
            random_answer = random.choice(MOCK_CONSULT_ANSWERS)
            
            consultation_text = f"üí¨ –ò–ò-–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–º–æ–∫)\n\n"
            consultation_text += f"ü§ñ {random_answer}\n\n"
            consultation_text += "üí° –≠—Ç–æ –º–æ–∫-–æ—Ç–≤–µ—Ç. –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –æ—Ç–≤–µ—Ç –æ—Ç OpenAI."
            
            await message.answer(consultation_text)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–ò-–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"
        @dp.message(lambda message: message.text == "–ò–ò-–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        async def handle_ai_analysis(message: types.Message):
            user_id = message.from_user.id
            logger.info(f"USER ACTION: user_id={user_id}, action=ai_analysis_button, data=None")
            
            ai_text = "üîç –ò–ò-–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ (–º–æ–∫)\n\n"
            ai_text += "‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–º–æ–∫)\n\n"
            ai_text += "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            ai_text += "‚Ä¢ –¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: –ê–Ω–∞–ª–∏—Ç–∏–∫ (INTJ)\n"
            ai_text += "‚Ä¢ –ö–≤–∞–¥—Ä–∞: –ê–ª—å—Ñ–∞\n"
            ai_text += "‚Ä¢ –†–æ–ª—å: –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å\n"
            ai_text += "‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 95%\n\n"
            ai_text += "üí° –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ InsightFace + GPT Vision."
            
            await message.answer(ai_text)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∫–∞"
        @dp.message(lambda message: message.text == "–ü–æ–¥–ø–∏—Å–∫–∞")
        async def handle_subscription(message: types.Message):
            user_id = message.from_user.id
            logger.info(f"USER ACTION: user_id={user_id}, action=subscription_button, data=None")
            
            await message.answer("üí≥ WebView: –ü–æ–¥–ø–∏—Å–∫–∞ (–º–æ–∫)\n\nüîê –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ WebView.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–∞–∫–µ—Ç—ã"
        @dp.message(lambda message: message.text == "–ü–∞–∫–µ—Ç—ã")
        async def handle_packages(message: types.Message):
            user_id = message.from_user.id
            logger.info(f"USER ACTION: user_id={user_id}, action=packages_button, data=None")
            
            await message.answer("üì¶ WebView: –ü–∞–∫–µ—Ç—ã (–º–æ–∫)\n\nüéÅ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ WebView.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É—Ä—Å—ã"
        @dp.message(lambda message: message.text == "–ö—É—Ä—Å—ã")
        async def handle_courses(message: types.Message):
            user_id = message.from_user.id
            logger.info(f"USER ACTION: user_id={user_id}, action=courses_button, data=None")
            
            await message.answer("üìö WebView: –ö—É—Ä—Å—ã (–º–æ–∫)\n\nüéì –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫—É—Ä—Å–æ–≤ –≤ WebView.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ä—Ç—ã"
        @dp.message(lambda message: message.text == "–ö–∞—Ä—Ç—ã")
        async def handle_cards(message: types.Message):
            user_id = message.from_user.id
            logger.info(f"USER ACTION: user_id={user_id}, action=cards_button, data=None")
            
            await message.answer("üÉè WebView: –ö–∞—Ä—Ç—ã (–º–æ–∫)\n\nüé¥ –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ä—Ç –≤ WebView.")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @dp.message()
        async def handle_any_message(message: types.Message):
            user_id = message.from_user.id
            text = message.text or "–±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
            logger.info(f"USER ACTION: user_id={user_id}, action=any_message, data=text={text}")
            
            await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start")
        
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("üì± –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞")
        logger.info("üîç –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å")
        logger.info("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())
