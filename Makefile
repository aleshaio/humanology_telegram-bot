.PHONY: help install dev test lint format clean docker-build docker-up docker-down

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	pip install -r requirements.txt

dev: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ development —Ä–µ–∂–∏–º–µ
	python run_dev.py

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
	pytest tests/ -v

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–∞–º–∏
	black --check .
	isort --check-only .
	mypy .

format: ## –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	black .
	isort .

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete
	find . -type f -name "*.pyo" -delete
	find . -type f -name "*.pyd" -delete
	find . -type f -name ".coverage" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +
	find . -type d -name ".mypy_cache" -exec rm -rf {} +

docker-build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	docker build -t humanology-bot .

docker-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Docker Compose
	docker-compose up -d

docker-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker Compose
	docker-compose down

docker-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Docker
	docker-compose logs -f

docker-restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker Compose
	docker-compose restart

setup-dev: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ development –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ development –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	@if [ ! -f .env ]; then \
		cp env.example .env; \
		echo "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –∏–∑ env.example"; \
		echo "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"; \
	else \
		echo "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; \
	fi
	@echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
	pip install -r requirements.txt
	@echo "Development –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!"

check-env: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@if [ ! -f .env ]; then \
		echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"; \
		echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ: make setup-dev"; \
		exit 1; \
	fi
	@echo "‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"
	@echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö..."
	@source .env && \
	if [ -z "$$BOT_TOKEN" ]; then \
		echo "‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; \
		exit 1; \
	fi && \
	if [ -z "$$WEBHOOK_URL" ]; then \
		echo "‚ùå WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; \
		exit 1; \
	fi && \
	if [ -z "$$DB_DSN" ]; then \
		echo "‚ùå DB_DSN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; \
		exit 1; \
	fi && \
	if [ -z "$$OPENAI_API_KEY" ]; then \
		echo "‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; \
		exit 1; \
	fi && \
	echo "‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

run: check-env ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
	python run_dev.py

full-setup: setup-dev check-env ## –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
	@echo "üéâ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"
	@echo "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: make run"
